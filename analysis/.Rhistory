setwd("~/Pudding/helpers/maslow/analysis")
knitr::opts_chunk$set(echo = TRUE)
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data <- read_tsv("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
# For general data cleaning and analysis
library(tidyverse)
# For keeping your files in relative directories
library(here)
# If your data includes dates that need to be wrangled
library(lubridate)
# For interactive/searchable tables in your report
library(DT)
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data <- read_tsv("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data <- read_tsv("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
View(data)
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data <- read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data <- as.data.frame(read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt"))
data
View(data)
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
?as.data.frame
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data <- as.data.frame(read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt"), row.names = "Face")
# use here to find the file you want and save the file path to a variable
# in this case, the path would look like "working_directory/raw_data/data.csv"
# file_path <- here("assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
lines <- read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
data <- as.data.frame(lines)
data
data <- as.data.frame(lines) %>% filter(!is.na(lines))
View(data)
data <- as.data.frame(lines) %>% filter(lines != "")
View(data)
data <- as.data.frame(lines) %>%
filter(lines != "") %>%
unique()
data <- as.data.frame(lines) %>%
filter(lines != "") %>%
unique() %>%
mutate(lines=str_to_lower(lines)) %>%
filter(str_detect("i need") | str_detect("i want"))
data <- as.data.frame(lines) %>%
filter(lines != "") %>%
unique() %>%
mutate(lines=str_to_lower(lines)) %>%
filter(str_detect(lines, "i need") | str_detect(lines, "i want"))
View(data)
setwd("~/Pudding/helpers/maslow/analysis/rmds")
knitr::opts_chunk$set(echo = TRUE)
#lines <- read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
# data <- as.data.frame(lines) %>%
# filter(lines != "") %>%
#  unique() %>%
#  mutate(lines=str_to_lower(lines)) %>%
#  filter(str_detect(lines, "i need") | str_detect(lines, "i want"))
```
# For general data cleaning and analysis
library(tidyverse)
# For keeping your files in relative directories
library(here)
# If your data includes dates that need to be wrangled
library(lubridate)
# For interactive/searchable tables in your report
library(DT)
#lines <- read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
# data <- as.data.frame(lines) %>%
# filter(lines != "") %>%
#  unique() %>%
#  mutate(lines=str_to_lower(lines)) %>%
#  filter(str_detect(lines, "i need") | str_detect(lines, "i want"))
x <- 5
#lines <- read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
# data <- as.data.frame(lines) %>%
# filter(lines != "") %>%
#  unique() %>%
#  mutate(lines=str_to_lower(lines)) %>%
#  filter(str_detect(lines, "i need") | str_detect(lines, "i want"))
song_data <- read_csv("../assets/data/raw_data/song_metadata.csv")
View(song_data)
View(song_data)
#lines <- read_lines("../assets/data/raw_data/lyrics/Justin_Bieber_F-Baby.txt")
# data <- as.data.frame(lines) %>%
# filter(lines != "") %>%
#  unique() %>%
#  mutate(lines=str_to_lower(lines)) %>%
#  filter(str_detect(lines, "i need") | str_detect(lines, "i want"))
song_data <- read_csv("../assets/data/raw_data/song_metadata.csv")
artist_data <- song_data %>% group_by(artist)
artist_data %>% summarize(count=n())
c <- artist_data %>% summarize(count=n()) %>% arrange(desc(count))
View(c)
c <- artist_data %>% summarize(count=n()) %>% arrange(desc(count)) %>% filter(count >= 5)
View(c)
artist_data_vetted <- artist_data %>% summarize(count=n()) %>% arrange(desc(count)) %>% filter(count >= 5)
artist_vetted <- artist_data %>% summarize(count=n()) %>% arrange(desc(count)) %>% filter(count >= 5)
View(artist_data)
View(song_data)
song_vetted <- song_data %>% filter(artist %in% artist_vetted$artist)
dir_in <- "../assets/data/raw_data/lyrics/"
lapply(song_vetted$fname, function(fname) {
filepath <- paste(dir_in, fname)
filepath
# lines <- read_lines()
# data <- as.data.frame(lines) %>%
# filter(lines != "") %>%
#  unique() %>%
#  mutate(lines=str_to_lower(lines)) %>%
#  filter(str_detect(lines, "i need") | str_detect(lines, "i want"))
})
lapply(song_vetted$fname, function(fname) {
filepath <- paste(dir_in, fname, sep="")
filepath
# lines <- read_lines()
# data <- as.data.frame(lines) %>%
# filter(lines != "") %>%
#  unique() %>%
#  mutate(lines=str_to_lower(lines)) %>%
#  filter(str_detect(lines, "i need") | str_detect(lines, "i want"))
})
View(song_vetted)
View(artist_vetted)
View(song_vetted)
results <- map_dfr(song_vetted, function(datum) {
filepath <- paste(dir_in, datum$fname, sep="")
lines <- read_lines(filepath)
# convert vector to dataframe
data <- as.data.frame(lines) %>%
# filter to lines with text
filter(lines != "") %>%
# get rid of duplicate lines
unique() %>%
# lowercase all text
mutate(lines=str_to_lower(lines)) %>%
# reduce to lines with desired verbage
filter(str_detect(lines, "i need") | str_detect(lines, "i want")) %>%
# add in artist name column + title
mutate(artist=datum$artist, title=datum$title)
})
results <- map_dfr(song_vetted, function(datum) {
filepath <- paste(dir_in, datum$fname, sep="")
lines <- read_lines(filepath)
# convert vector to dataframe
data <- as.data.frame(lines) %>%
# filter to lines with text
filter(lines != "") %>%
# get rid of duplicate lines
unique() %>%
# lowercase all text
mutate(lines=str_to_lower(lines)) %>%
# reduce to lines with desired verbage
filter(str_detect(lines, "i need") | str_detect(lines, "i want")) %>%
# add in artist name column + title
mutate(artist=datum$artist, title=datum$title)
})
results <- map_dfr(song_vetted, function(datum) {
datum$fname
})
results <- map_dfr(song_vetted, function(datum) {
datum
})
results <- map_dfr(song_vetted, function(datum) {
print(datum)
})
# loop through each song file and find wants and needs
# purrr (map_dfr, map_dfc)
song_vetted[0]
# loop through each song file and find wants and needs
# purrr (map_dfr, map_dfc)
print(song_vetted[0])
# loop through each song file and find wants and needs
# purrr (map_dfr, map_dfc)
print(song_vetted[1])
# loop through each song file and find wants and needs
# purrr (map_dfr, map_dfc)
print(song_vetted[1])
# loop through each song file and find wants and needs
# purrr (map_dfr, map_dfc)
song_vetted[[1]]
# loop through each song file and find wants and needs
# purrr (map_dfr, map_dfc)
song_vetted[0,[1]]
results <- map_dfr(song_vetted, function(datum) {
print(datum$fname)
})
results <- map_dfr(song_vetted, function(datum) {
print(datum[1])
})
results <- map_dfr(song_vetted, function(datum) {
print(datum[2])
})
results <- map_dfr(song_vetted, function(datum) {
print(datum)
})
results <- map_dfr(song_vetted, function(datum) {
datum$fname
})
results <- map_dfr(song_vetted, function(datum) {
print(datum[["fname"]])
})
results <- map_dfr(song_vetted, function(datum) {
print(datum[[fname]])
})
results <- map_dfr(song_vetted, function(datum) {
print(datum[[0]])
})
results <- map_dfr(song_vetted, function(datum) {
print(datum[[1]])
})
map(song_vetted[1:4], "title")
map(song_vetted[1:4])
map(song_vetted[1:4], "title")
map(song_vetted[1:4], 2)
map(song_vetted[1:4], 5)
map(song_vetted[1:4], 55)
map(song_vetted[1:2], 55)
song_vetted[1:2]
song_vetted[1]
song_data[1:2]
